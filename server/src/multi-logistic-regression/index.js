const loadCSV = require('../data/load-csv');
const dataCSV = require('../data/data-csv');
const LogisticRegression = require('./logistic-regression')
const plot = require('node-remote-plot')
const numeral = require('numeral');
const _ = require('lodash');
/* ----------------------------  Fundamentals ------------------------------------------ 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
------------------------------------------------------------------------------------ */

/* ----------------------------  Goal >  ------------------------------------------ 
Multinominal Logistic Regression
      Given a vehicle weight,horsepower and engine displacement, will it 
------------------------------------------------------------------------------------ */

const process = (fileName) => {

  /* -------------- Step 1: Identify data that is relevant to the problem --------------*/
  /* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
  let { features, labels, testFeatures, testLabels } = loadCSV('./src/data/cars.csv', {
    shuffle: true,
    splitTest: 50,
    converters: {
      mpg: (value) => {
        const mpg = parseFloat(value);
        if (mpg < 15) {
          return [1, 0, 0]
        } else if (mpg < 30) {
          return [0, 1, 0]
        } else {
          return [0, 0, 1]
        }
      }
    },
    dataColumns: ['horsepower', 'displacement', 'weight'],
    labelColumns: ['mpg']
  });

  /* make sure data loaded
  console.log('testFeatures - displacement,horsepower,weight :', testFeatures);
  console.log('testLabels - mpg :', _.flatMap(testLabels));
  console.log('-----------------------------');
  console.log('features :', features.length);
  console.log('labels - mpg :', labels.length);

  testFeatures - horsepower,displacement,weight : [
  [ 351, 153, 2.077 ],
  [ 79, 58, 0.9125 ],
  [ 198, 95, 1.4165 ],
  [ 455, 225, 2.4755 ],
  [ 121, 115, 1.3975 ],
  [ 97, 46, 0.9175 ],
  [ 173, 110, 1.3625 ],
  [ 350, 105, 1.8625 ],
  [ 121, 110, 1.33 ],
  [ 198, 95, 1.551 ]
]
testLabels - mpg : [
[ 1, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0 ],
  [ 0, 1, 0 ], [ 0, 1, 0 ], [ 0, 1, 0 ], [ 0, 1, 0 ],
  [ 0, 1, 0 ], [ 0, 1, 0 ], [ 0, 1, 0 ], [ 0, 1, 0 ],
  [ 0, 1, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 0 ],
  [ 0, 0, 1 ], [ 0, 0, 1 ], [ 0, 0, 1 ], [ 0, 1, 0 ],
]

 */
  /* --------------Step 3: Decide on the type of output you are predicting --------------*/
  /* This is Multinominal Logistic Regression Clasification type  */

  /* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
  /* Algorithm = Logistic Regression  Softmax */

  // new instance
  const regression = new LogisticRegression(features, _.flatMap(labels), {
    learningRate: 0.5,
    iterations: 100,
    batchSize: 10,  // no of records in a batch

  });

  // regression.weights.print()
  /*
  Tensor
    [[0, 0, 0],
     [0, 0, 0],
     [0, 0, 0],
     [0, 0, 0]]
  */
  // call train
  regression.train();
  console.log(' ............. Trainig Done ............. ')
  
  // call test only development mode for accuracy
  const R2 = regression.test(testFeatures, _.flatMap(testLabels));
  const R2_ = numeral(100 * R2).format('0,0.00');
  console.log('Cross Entropy : ', R2_, '%', '|', R2);

  // plot({
  //   x: regression.costHistory.reverse(),
  //   xLabel: 'Iteration #',
  //   yLabel: 'Cross Entropy  (Cost)',
  //   title: 'Cost History',
  //   name: 'cost_iteration'
  // });

  //   console.log(' costHistory : ', regression.costHistory)
  //   console.log(' bHistory : ', regression.bHistory)
  // plot({
  //   x: regression.bHistory,
  //   y: regression.costHistory.reverse(),
  //   xLabel: 'Value of B',
  //   yLabel: 'Cross Entropy  (Cost)',
  //   title: 'Cost vs B',
  //   name: 'cost_b'
  // });


  /* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
  /*      observations 
            [
                 ['horsepower', 'displacement', 'weight'],
                  ['horsepower', 'displacement', 'weight'],
                  ['horsepower', 'displacement', 'weight']
            ]  
      */

  const observations = [
    // [215, 440, 2.16]
    [150, 200, 2.223],
    // [350, 105, 1.8625]

  ]

  // const predictData = regression.predict(observations);
  // predictData.print();


  /* ----------------------------  Step 6: END ----------------------------*/
  // return { accuracy: R2_, data: finalData };
  // return { accuracy: 74.04, data: finalData };
  return { accuracy: 70, data: [[]] };
};



module.exports = { process };