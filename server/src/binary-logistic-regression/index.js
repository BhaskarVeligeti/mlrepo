const loadCSV = require('../data/load-csv');
const dataCSV = require('../data/data-csv');
const LogisticRegression = require('./logistic-regression')
const plot = require('node-remote-plot')
const numeral = require('numeral');

/* ----------------------------  Fundamentals ------------------------------------------ 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
------------------------------------------------------------------------------------ */

/* ----------------------------  Goal >  ------------------------------------------ 
      Given a vehicle weight,horsepower and engine displacement, will it PASS or NOT PASS a smog emission check
------------------------------------------------------------------------------------ */

const process = (fileName) => {

  /* -------------- Step 1: Identify data that is relevant to the problem --------------*/
  /* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
  let { features, labels, testFeatures, testLabels } = loadCSV('./src/data/cars.csv', {
    shuffle: true,
    splitTest: 50,
    converters: {
      passedemissions: (value) => value === 'TRUE' ? 1 : 0
    },
    dataColumns: ['horsepower', 'displacement', 'weight'],
    labelColumns: ['passedemissions']
  });

  /* make sure data loaded
    console.log('testFeatures - displacement,horsepower,weight :', testFeatures);
  console.log('testLabels - passedemissions :', testLabels);
  console.log('-----------------------------');
  console.log('features :', features.length);
  console.log('labels - passedemissions :', labels.length);

  testFeatures - horsepower,displacement,weight : [
  [ 351, 153, 2.077 ],
  [ 79, 58, 0.9125 ],
  [ 198, 95, 1.4165 ],
  [ 455, 225, 2.4755 ],
  [ 121, 115, 1.3975 ],
  [ 97, 46, 0.9175 ],
  [ 173, 110, 1.3625 ],
  [ 350, 105, 1.8625 ],
  [ 121, 110, 1.33 ],
  [ 198, 95, 1.551 ]
]
testLabels - passedemissions : [
  [ 0 ], [ 1 ], [ 1 ],
  [ 0 ], [ 1 ], [ 1 ],
  [ 1 ], [ 1 ], [ 1 ],
  [ 1 ]
]

 */
  /* --------------Step 3: Decide on the type of output you are predicting --------------*/
  /* This is Logistic Regression Clasification type  */

  /* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
  /* Algorithm = Logistic Regression  Sigmoid */

  // new instance
  const regression = new LogisticRegression(features, labels, {
    learningRate: 0.5,
    decisionBoundary: 0.5,
    iterations: 100,
    batchSize: 50,  // no of records in a batch

  });

  // call train
  regression.train();
  console.log(' ............. Trainig Done ............. ')
  // call test only development mode for accuracy
  const R2 = regression.test(testFeatures, testLabels);
  const R2_ = numeral(100 * R2).format('0,0.00');
  console.log('Cross Entropy : ', R2_, '%', '|', R2);

  plot({
      x: regression.costHistory.reverse(),
      xLabel: 'Iteration #',
      yLabel: 'Cross Entropy  (Cost)',
      title: 'Cost History',
      name: 'cost_iteration'
  });

  //   console.log(' costHistory : ', regression.costHistory)
  //   console.log(' bHistory : ', regression.bHistory)
  // plot({
  //   x: regression.bHistory,
  //   y: regression.costHistory.reverse(),
  //   xLabel: 'Value of B',
  //   yLabel: 'Cross Entropy  (Cost)',
  //   title: 'Cost vs B',
  //   name: 'cost_b'
  // });


  /* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
  /*      observations 
            [
                 ['horsepower', 'displacement', 'weight'],
                  ['horsepower', 'displacement', 'weight'],
                  ['horsepower', 'displacement', 'weight']
            ]  
      */

  const observations = [
    // [130,307,1.75]
    [88, 97, 1.065],
    // [350, 105, 1.8625]

  ]

  const predictData = regression.predict(observations);
  // console.log(' predictData : ',numeral(predictData[0][0]).format('0,0.00')*100 )
  // console.log(' predictData : ', numeral(predictData[0][0]).format('0,0.00') * 100)

  // console.log(' observations : ', observations)
  // const finalData = observations.map((d, i) => {
  //   // console.log(' observations : ', [...d, Math.floor(predictData[i][0])])
  //   return [...d, Math.floor(predictData[i][0])]
  // })
  // const finalData = observations.map((d, i) => [...d, Math.floor(predictData[i][0])])
  // console.log(' finalData : ', finalData)

  // let fileName1='mayData'
  // // const __fileName = `./src/linearregression/mayData.csv`
  // const __fileName = `./src/linearregression/${fileName1}.csv`
  // let { fileData } = dataCSV(__fileName, { dataColumns: ['month','year','rateaccount','property','sgid','type','streetnumber','streetname','suburb','account','install','device','uomdesc','uom','readings'] });
  // console.log(' fileData : ', __fileName,fileData)


  //  const finalData = fileData.map((d, i) => [...d, Math.floor(predictData[i][0])])
  //   console.log(' finalData : ', finalData)

  /*

  const _fileName1 = `./src/data/${fileName}.csv`
  let { observations } = dataCSV(_fileName1, { dataColumns: ['account', 'install', 'device', 'uom', 'readings'] });
  // console.log(' observations1 : ', observations)
  const predictData = regression.predict(observations);
  console.log(' ............. Prediction Calculations Done ............. ')
  // console.log(' predictData : ', predictData)

  const _fileName2 = `./src/data/${fileName}.csv`
  let observations2 = dataCSV(_fileName2, { dataColumns: ['ordinal', 'month', 'year', 'rateaccount', 'property', 'sgid', 'type', 'streetnumber', 'streetname', 'suburb', 'account', 'install', 'device', 'uomdesc', 'uom', 'readings', 'afterrandvalue'] });
  // console.log(' observations2 : ', observations2.observations)
  const finalData = observations2.observations.map((d, i) => [...d, Math.floor(predictData[i][0])])
  // console.log(' finalData : ', finalData)

  */
  /* ----------------------------  Step 6: END ----------------------------*/
  // return { accuracy: R2_, data: finalData };
  // return { accuracy: 74.04, data: finalData };
  return { accuracy: 70, data: [[]] };
};



module.exports = { process };