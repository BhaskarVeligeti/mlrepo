const LogisticRegression = require('./logistic-regression')
const plot = require('node-remote-plot')
const numeral = require('numeral');
const _ = require('lodash');
const mnist = require('mnist-data');


/* ----------------------------  Fundamentals ------------------------------------------ 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
------------------------------------------------------------------------------------ */

/* ----------------------------  Goal >  ------------------------------------------ 
Multinominal Logistic Regression
      Given a vehicle weight,horsepower and engine displacement, will it 
------------------------------------------------------------------------------------ */

const process = (fileName) => {

  function loadData() {
    const mnistData = mnist.training(0, 60000);
    const features = mnistData.images.values.map(image => _.flatMap(image))

    /**   console.log('features :',features)
     * features : [
    [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0,
      ... 684 more items
    ]
  ]
     */

    /** console.log('labels :', mnistData.labels.values)
     * labels : [5, 0, 4, 1, 9,2, 1, 3, 1, 4]
     */
    /** step 2 : encoding Labels */

    const encodeLabels = mnistData.labels.values.map(label => {
      const row = new Array(10).fill(0)
      row[label] = 1
      return row
    })

    return { features, labels: encodeLabels }
  }
  /* console.log('encodeLabels :', encodeLabels)
  encodeLabels : [
    [0, 0, 0, 0, 0,1, 0, 0, 0, 0],
    [1, 0, 0, 0, 0,0, 0, 0, 0, 0],
     */

  /* -------------- Step 1: Identify data that is relevant to the problem --------------*/
  /* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/

  /* --------------Step 3: Decide on the type of output you are predicting --------------*/
  /* This is Multinominal Logistic Regression Clasification type  */

  /* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
  /* Algorithm = Logistic Regression  Softmax */

  const { features, labels } = loadData()

  // new instance
  const regression = new LogisticRegression(features, labels, {
    learningRate: 1,
    iterations: 40,
    batchSize: 500,  // no of records in a batch

  });

  // call train
  regression.train();
  console.log(' ............. Trainig Done ............. ')
  // call test only development mode for accuracy

  const testMnistData = mnist.testing(0, 10000);
  const testFeatures = testMnistData.images.values.map(image => _.flatMap(image))
  const testEncodeLabels = testMnistData.labels.values.map(label => {
    const row = new Array(10).fill(0)
    row[label] = 1
    return row
  })

  const accuracy = regression.test(testFeatures, testEncodeLabels);
  const accuracy_ = numeral(100 * accuracy).format('0,0.00');
  console.log('Accuracy : ', accuracy_, '%', '|', accuracy);

  plot({
    x: regression.costHistory.reverse(),
    xLabel: 'Iteration #',
    yLabel: 'Accuracy',
    title: 'Accuracy',
    name: 'cost_iteration'
  });



  /* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/



  /* ----------------------------  Step 6: END ----------------------------*/

  return { accuracy: accuracy_, data: [[]] };
};



module.exports = { process };