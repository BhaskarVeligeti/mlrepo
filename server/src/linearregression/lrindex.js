const loadCSV = require('./load-csv');
const dataCSV = require('./data-csv');
const LinearRegression = require('./liner-regression')
const plot = require('node-remote-plot')
const numeral = require('numeral');

/* ----------------------------  Fundamentals ------------------------------------------ 
                                  1. Features VS Labels
                                  2. Test VS Training sets of data
                                  3. Feature Standarization
                                  4. Common data structure (array of arrays)
                                  5. Feature Selection
                                Tool :   https://stephengrider.github.io/JSPlaygrounds/
------------------------------------------------------------------------------------ */

/* ----------------------------  Goal >  ------------------------------------------ 
                  What is the Bill Amount  for give Unit of Measure and Readings
------------------------------------------------------------------------------------ */

const process = (fileName) => {

  /* -------------- Step 1: Identify data that is relevant to the problem --------------*/
  /* -------------- Step 2: Assemble a set of data related to the problem you're trying to solve : --------------*/
  let { features, labels, testFeatures, testLabels } = loadCSV('./src/linearregression/april.csv', {
    shuffle: false,
    splitTest: 10, // half of features data 
    dataColumns: ['account', 'install', 'device', 'uom', 'readings'],
    // dataColumns: ['readings'],
    labelColumns: ['randvalue']
  });


  /* make sure data loaded
  console.log('testFeatures - uom,readings :', testFeatures);
  console.log('testLabels - randvalue :', testLabels);
  console.log('-----------------------------');
  console.log('features :', features.length);
  console.log('labels - randvalue :', labels.length);
 testFeatures - 'account', 'install', 'device', 'uom', 'readings' : 
 [
[ 201170066, 3003053236, 63020255, 1, 544 ],
  [ 201170066, 3003053236, 63020255, 2, 459928 ],
  [ 201648433, 3002667523, 63191883, 1, 70 ],
  [ 201648433, 3002667523, 63191883, 2, 650 ],
  [ 201651330, 3003387163, 63036235, 3, 354 ],
  [ 201651330, 3003387163, 63036235, 1, 100 ],
  [ 201651330, 3003387163, 63036235, 2, 3546 ],
  [ 201657653, 3002673111, 63034384, 1, 192 ],
  [ 201657653, 3002673111, 63034384, 2, 52534 ],
  [ 202320028, 3003536817, 93936557, 3, 34911 ]
 ]
 testLabels - randvalue : in axis direction 
 [
 [ 102005 ], [ 301943 ],
  [ 13104 ],  [ 427 ],
  [ 70 ],     [ 18720 ],
  [ 2328 ],   [ 36055 ],
  [ 34488 ],  [ 6853 ]
 ]
 */
  /* --------------Step 3: Decide on the type of output you are predicting --------------*/
  /* This is Regression  type  */

  /* -------------- Step 4: Based on type of output,pick an algorithm that will determine a correlation between your "features" and "labels" --------------*/
  /* Algorithm = Linear Regression */

  // new instance
  const regression = new LinearRegression(features, labels, {
    learningRate: 0.1,
    iterations: 100,
    batchSize: 20  // no of records in a batch

  });

  // call train
  regression.train();
  console.log(' ............. Trainig Done ............. ')
  // call test only development mode for accuracy
  // const R2 = regression.test(testFeatures, testLabels);
  // const R2_ = numeral(100 * R2).format('0,0.00');
  // console.log('Coefficent of Determination : ', R2_, '%', '|', R2); // Coefficent of Determination :   % | 

  // plot({
  //     x: regression.mseHistory.reverse(),
  //     xLabel: 'Iteration #',
  //     yLabel: 'Mean Squared Error (MSE)',
  //     title: 'MSE History',
  //     name: 'mse_iteration'
  // });

  //   console.log(' mseHistory : ', regression.mseHistory)
  //   console.log(' bHistory : ', regression.bHistory)
  // plot({
  //   x: regression.bHistory,
  //   y: regression.mseHistory.reverse(),
  //   xLabel: 'Value of B',
  //   yLabel: 'Mean Squared Error (MSE)',
  //   title: 'MSE vs B',
  //   name: 'mse_b'
  // });


  /* -------------- Step 5: Use model generated by algoritm to make a prediction --------------*/
  /*      observations 
            [
                  ['uom', 'readings'],
                  ['uom', 'readings'],
                  ['uom', 'readings']
            ]  
      */

  // const observations = [
  //   [201651330, 3003387163, 63036235, 1, 150],
  //   [201651330, 3003387163, 63036235, 2, 3000],
  //   [201651330, 3003387163, 63036235, 3, 300]

  // ]

  // const predictData = regression.predict(observations);
  // console.log(' predictData : ', predictData)

  // console.log(' observations : ', observations)
  // const finalData = observations.map((d, i) => {
  //   // console.log(' observations : ', [...d, Math.floor(predictData[i][0])])
  //   return [...d, Math.floor(predictData[i][0])]
  // })
  // const finalData = observations.map((d, i) => [...d, Math.floor(predictData[i][0])])
  // console.log(' finalData : ', finalData)

  // let fileName1='mayData'
  // // const __fileName = `./src/linearregression/mayData.csv`
  // const __fileName = `./src/linearregression/${fileName1}.csv`
  // let { fileData } = dataCSV(__fileName, { dataColumns: ['month','year','rateaccount','property','sgid','type','streetnumber','streetname','suburb','account','install','device','uomdesc','uom','readings'] });
  // console.log(' fileData : ', __fileName,fileData)


  //  const finalData = fileData.map((d, i) => [...d, Math.floor(predictData[i][0])])
  //   console.log(' finalData : ', finalData)


  const _fileName1 = `./src/linearregression/${fileName}.csv`
  let { observations } = dataCSV(_fileName1, { dataColumns: ['account', 'install', 'device', 'uom', 'readings'] });
  // console.log(' observations1 : ', observations)
  const predictData = regression.predict(observations);
  console.log(' ............. Prediction Calculations Done ............. ')
  // console.log(' predictData : ', predictData)

  const _fileName2 = `./src/linearregression/${fileName}.csv`
  let observations2 = dataCSV(_fileName2, { dataColumns: ['ordinal','month', 'year', 'rateaccount', 'property', 'sgid', 'type', 'streetnumber', 'streetname', 'suburb', 'account', 'install', 'device', 'uomdesc', 'uom', 'readings','afterrandvalue'] });
  // console.log(' observations2 : ', observations2.observations)
  const finalData = observations2.observations.map((d, i) => [...d, Math.floor(predictData[i][0])])
  // console.log(' finalData : ', finalData)

  /* ----------------------------  Step 6: END ----------------------------*/
  // return { accuracy: R2_, data: finalData };
  return { accuracy: 74.04, data: finalData };
  // return { accuracy: 70, data: [[]] };
};



module.exports = { process };